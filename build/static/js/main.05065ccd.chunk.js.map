{"version":3,"sources":["bunzz.js","context/contract-context.js","components/UI/Loading.module.css","utils/trxUtils.js","context/theme-context.js","context/trx-context.js","components/UI/Loading.jsx","App.jsx","index.jsx"],"names":["init","a","bunzz","initializeHandler","dappId","process","apiKey","handler","ContractContext","React","createContext","contract","undefined","userAddress","connected","balance","getBalance","ContractContextProvider","children","useState","setContract","setUserAddress","setConnected","setBalance","useEffect","setup","console","log","MODULE_NAME","getSignerAddress","getContract","error","balanceOf","then","res","data","catch","err","bo","getBalanceFirst","Provider","value","module","exports","formatTransactions","transactions","map","trx","midTrx","to","transactionHash","hash","blockNumber","blockHash","success","from","mid","message","amount","senderName","timeStamp","mergeTransactionsChainAndDB","chainTrx","dbTrx","dbTrxHashes","chainTrxNotInDB","filter","includes","timeConverter","UNIX_timestamp","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","ThemeContext","theme","onToggleTheme","onSetTheme","ThemeContextProvider","themeState","setThemeState","window","themeFromLS","localStorage","getItem","setItem","TransactionContext","isFromChain","addTransaction","TransactionContextProvider","contractCtx","useContext","setTransactions","setIsFromChain","getTransactions","fetch","json","jsonResponse","responseFromBlockchain","transactionsFromBlockchain","result","formattedTransactionsFromBlockchain","method","headers","body","JSON","stringify","ok","transactionsFromDB","status","mergedTransactions","newTransactions","Loading","text","className","classes","loading","anime","About","lazy","SendMeHu","Wallet","Transactions","Home","ErrorPage404","App","fallback","path","element","replace","withAmount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05065ccd.chunk.js","sourcesContent":["import bunzz from \"bunzz-sdk\";\r\n\r\nconst DAPP_ID = process.env.REACT_APP_DAPP_ID;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst init = async () => {\r\n  const handler = await bunzz.initializeHandler({\r\n    dappId: DAPP_ID,\r\n    apiKey: API_KEY,\r\n  });\r\n  return handler;\r\n};\r\n\r\nexport default init;","import React, { useState, useEffect } from \"react\";\r\nimport init from \"../bunzz\";\r\n\r\nconst ContractContext = React.createContext({\r\n  contract: undefined,\r\n  userAddress: \"\",\r\n  connected: false,\r\n  balance: \"\",\r\n  getBalance: () => {},\r\n});\r\n\r\nexport const ContractContextProvider = ({ children }) => {\r\n  const [contract, setContract] = useState();\r\n  const [userAddress, setUserAddress] = useState(\"\");\r\n  const [connected, setConnected] = useState(false);\r\n  const [balance, setBalance] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const setup = async () => {\r\n        console.log(\"ran setup\");\r\n      try {\r\n        const handler = await init();\r\n\r\n        const MODULE_NAME = \"Token (ERC20)\";\r\n        const userAddress = await handler.getSignerAddress();\r\n        const contract = await handler.getContract(MODULE_NAME);\r\n\r\n        setUserAddress(userAddress);\r\n        setContract(contract);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    setup();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      setConnected(true)\r\n    }\r\n  }, [contract])\r\n\r\n  const getBalance = async () => {\r\n    if (!!userAddress && !!contract && !balance) {\r\n      const bo = await contract\r\n        .balanceOf(userAddress)\r\n        .then((res) => {\r\n          return res.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          return balance;\r\n        });\r\n\r\n      setBalance(bo);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getBalanceFirst = async () => {\r\n      console.log(\"getting balance\");\r\n      const bo = await contract\r\n        .balanceOf(userAddress)\r\n        .then((res) => {\r\n          return res.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          return balance;\r\n        });\r\n\r\n      setBalance(bo);\r\n    };\r\n\r\n    // get balance on page load\r\n    if (!!userAddress && !!contract && !balance) {\r\n      getBalanceFirst();\r\n    }\r\n  }, [userAddress, contract]);\r\n\r\n  //   console.log(contract, typeof contract)\r\n\r\n  // npx browserslist@latest --update-db\r\n  return (\r\n    <ContractContext.Provider\r\n      value={{ contract: contract, userAddress: userAddress, balance: balance, connected: connected, getBalance: getBalance, }}\r\n    >\r\n      {children}\r\n    </ContractContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ContractContext;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3pT6o\",\"anime\":\"Loading_anime__EoiST\",\"upDown\":\"Loading_upDown__1ln9E\",\"text\":\"Loading_text__3lkpe\"};","export const formatTransactions = (transactions) => {\r\n  const formattedTransactions = transactions.map((trx) => {\r\n    const midTrx = trx.to ? trx.to : \"Anonymous\";\r\n\r\n    return {\r\n      transactionHash: trx.hash,\r\n      blockNumber: trx.blockNumber,\r\n      blockHash: trx.blockHash,\r\n      success: true,\r\n      from: trx.from,\r\n      mid: midTrx,\r\n      to: \"Anonymous\",\r\n      message: `${!trx.to ? \"Minting\": \"\"}`,\r\n      amount: 0,\r\n      senderName: \"Anonymous\",\r\n      timeStamp: trx.timeStamp,\r\n    };\r\n  });\r\n\r\n  return formattedTransactions;\r\n};\r\n\r\nexport const mergeTransactionsChainAndDB = (chainTrx, dbTrx) => {\r\n  const dbTrxHashes = dbTrx.map((trx) => {\r\n    return trx.transactionHash;\r\n  });\r\n\r\n  const chainTrxNotInDB = chainTrx.filter(\r\n    (trx) => !dbTrxHashes.includes(trx.transactionHash)\r\n  );\r\n\r\n  const mergedTransactions = [...dbTrx, ...chainTrxNotInDB];\r\n\r\n  return mergedTransactions;\r\n};\r\n\r\n\r\nexport const timeConverter = (UNIX_timestamp) => {\r\n  var a = new Date(UNIX_timestamp * 1000);\r\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n  var year = a.getFullYear();\r\n  var month = months[a.getMonth()];\r\n  var date = a.getDate();\r\n  var hour = a.getHours();\r\n  var min = a.getMinutes();\r\n  var sec = a.getSeconds();\r\n  var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n  return time;\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nconst ThemeContext = React.createContext({\r\n  theme: {},\r\n  onToggleTheme: () => {},\r\n  onSetTheme: () => {},\r\n});\r\n\r\nexport const ThemeContextProvider = ({ children }) => {\r\n  const [themeState, setThemeState] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    if (themeState === \"\") {\r\n      if (typeof window !== \"undefined\") {\r\n        let themeFromLS = localStorage.getItem(\"theme\");\r\n        if (themeFromLS !== \"\") {\r\n          setThemeState(themeFromLS);\r\n          // console.log(\"set from LS as\", themeFromLS);\r\n        }\r\n\r\n        if (!themeFromLS) {\r\n          setThemeState(\"light\")\r\n          // console.log(\"had to set as light\")\r\n        }\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  const toggleThemeHandler = () => {\r\n    if (themeState === \"light\") {\r\n      setThemeState(\"dark\");\r\n    } else {\r\n      setThemeState(\"light\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.setItem(\"theme\", themeState);\r\n    }\r\n  }, [themeState]);\r\n\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{\r\n        theme: themeState,\r\n        onToggleTheme: toggleThemeHandler,\r\n      }}\r\n    >\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContext;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { formatTransactions, mergeTransactionsChainAndDB } from \"../utils/trxUtils\";\r\nimport ContractContext from \"./contract-context\";\r\n\r\nconst TransactionContext = React.createContext({\r\n  transactions: [],\r\n  isFromChain: false,\r\n  addTransaction: () => {},\r\n});\r\n\r\nexport const TransactionContextProvider = ({ children }) => {\r\n  const contractCtx = useContext(ContractContext);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [isFromChain, setIsFromChain] = useState(false);\r\n\r\n  const userAddress = contractCtx.userAddress;\r\n\r\n  useEffect(() => {\r\n    const getTransactions = async () => {\r\n      console.log(\"gettingData\");\r\n      const responseFromBlockchain = await fetch(\r\n        `https://api-goerli.etherscan.io/api?module=account&action=txlist&address=${process.env.REACT_APP_MAIN_TOKEN}&startblock=0&endblock=99999999&page=1&offset=10&sort=asc&apikey=${process.env.REACT_APP_ETHERSCAN_KEY}`\r\n      )\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((jsonResponse) => {\r\n          return jsonResponse;\r\n        })\r\n        .catch((err) => console.log(err));\r\n\r\n        console.log(\"responseFromBlockchain\",  responseFromBlockchain);\r\n\r\n        const transactionsFromBlockchain = [...responseFromBlockchain.result];\r\n\r\n        // format chain transactions to look like db transactions\r\n      const formattedTransactionsFromBlockchain = formatTransactions(\r\n        transactionsFromBlockchain\r\n      );\r\n\r\n      console.log(formattedTransactionsFromBlockchain);\r\n\r\n      // get db transactions\r\n      const transactionsFromDB = await fetch(\"/api/trx/my-trx\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ userAddress: userAddress }),\r\n      })\r\n        .then((res) => {\r\n          if (res.ok) {\r\n            return res.json();\r\n          }\r\n        })\r\n        .then((jsonResponse) => {\r\n          return jsonResponse;\r\n        });\r\n\r\n        // if blockchain getting was successfull then merge with db\r\n        // else just use db only\r\n      if (responseFromBlockchain.status === \"1\") {\r\n        console.log(\"merging db and chain\")\r\n        const mergedTransactions = mergeTransactionsChainAndDB(formattedTransactionsFromBlockchain, transactionsFromDB)\r\n\r\n        \r\n\r\n        setTransactions(mergedTransactions);\r\n        setIsFromChain(true);\r\n      } else {\r\n        console.log(\"decided to use just db\")\r\n        setTransactions(transactionsFromDB);\r\n        setIsFromChain(false);\r\n      }\r\n    };\r\n\r\n    getTransactions();\r\n\r\n\r\n\r\n\r\n  }, [userAddress]);\r\n\r\n  const addTransaction = (trx) => {\r\n    const newTransactions = [...transactions, trx];\r\n\r\n    setTransactions(newTransactions)\r\n  }\r\n\r\n  console.log(transactions, isFromChain);\r\n\r\n\r\n\r\n  return (\r\n    <TransactionContext.Provider\r\n      value={{\r\n        transactions: transactions,\r\n        isFromChain: isFromChain,\r\n        addTransaction: addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </TransactionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TransactionContext;\r\n","\r\nimport classes from \"./Loading.module.css\"\r\n\r\nconst Loading = ({text, className}) => {\r\n    return (\r\n        <div className={`${classes.loading} ${className || \"\"}`}>\r\n            <div className={classes.anime}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n\r\n            <p className={classes.text}>{text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, {Suspense} from \"react\"\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport \"./App.css\";\n// import Home from \"./pages/Home\";\n// import ErrorPage404 from \"./pages/ErrorPage404\";\n// import Wallet from \"./pages/Wallet\";\n// import Transactions from \"./pages/Transactions\";\n// import SendMeHu from \"./pages/SendMeHu\";\nimport Loading from \"./components/UI/Loading\";\n// import About from \"./pages/About\";\n\nconst About = React.lazy(() => import('./pages/About'));\nconst SendMeHu = React.lazy(() => import('./pages/SendMeHu'));\nconst Wallet = React.lazy(() => import('./pages/Wallet'));\nconst Transactions = React.lazy(() => import('./pages/Transactions'));\nconst Home = React.lazy(() => import('./pages/Home'));\nconst ErrorPage404 = React.lazy(() => import('./pages/ErrorPage404'));\n\nconst App = () => {\n\n  // const submit = async () => {\n  //   await contract.mint(userAddress, value)\n  //     .then(data => {\n  //       console.log(data);\n  //       alert(\"Transaction was sent in success🎉\");\n  //     })\n  //     .catch(err => console.log(err));\n\n  // const ts = await contract.totalSupply()\n  // const sym = await contract.symbol()\n  // const dec = await contract.decimals()\n  // const bo = await contract.balanceOf(userAddress);\n\n  // console.log(userAddress, ts, sym, dec, bo);\n  // };\n\n  return (\n    <Suspense fallback={<div className={\"centered\"}>\n      <Loading />\n    </div>}>\n    <Router>\n      \n\n      \n      <Routes>\n        <Route path=\"/\" element={<Navigate replace to=\"/home\" />} />\n        <Route path=\"/home\" element={<Home />}>\n          {/* <Route path=\"new-user\" element={<h1>New user</h1>} /> */}\n        </Route>\n        <Route path=\"/about\" element={<Navigate replace to=\"/whats-hu\" />} />\n        <Route path=\"/whats-hu\" element={<About />} />\n        <Route path=\"/wallet\" element={<Wallet />} />\n\n        <Route path=\"/activity\" element={<Navigate replace to=\"/transactions\" />} />\n        <Route path=\"/transactions\" element={<Transactions />} />\n\n        <Route path=\"send-me-hu/share/:shareId/:name\" element={<SendMeHu />} />\n\n        <Route path=\"send-me-hu/share-fixed/:shareId/:name/:amount\" element={<SendMeHu withAmount={true} />} />\n\n        \n        {/* <Route path=\"/chat-room/:chatId\" element={<ChatRoom />} /> */}\n        <Route path=\"*\" element={<ErrorPage404 />} />\n      </Routes>\n    </Router>\n    </Suspense>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContractContextProvider } from \"./context/contract-context\";\nimport { ThemeContextProvider } from \"./context/theme-context\";\nimport { TransactionContextProvider } from \"./context/trx-context\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider >\n    <ContractContextProvider>\n      <TransactionContextProvider >\n        <App />\n      </TransactionContextProvider>\n    </ContractContextProvider>\n    </ThemeContextProvider>\n    \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}